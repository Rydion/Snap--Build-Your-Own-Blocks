Look for [Adrian] and/or Snapp in files to find the exact location.


morphic.js
Remove some codes that fails on NW.js for whatever reason.

[1550]
    Replace:
        return prop.hasOwnProperty('configurable') && (!prop.configurable);
    With:
        // [Adrian] Snapp
        // Workaround for this code failing on NW.js for MacOS
        return (prop === undefined) || (prop.hasOwnProperty('configurable') && (!prop.configurable));

[1750]
    Replace:
        return prop.hasOwnProperty('configurable') && (!prop.configurable);
    With:
        // [Adrian] Snapp
        // Workaround for this code failing on NW.js for MacOS
        return (prop === undefined) || (prop.hasOwnProperty('configurable') && (!prop.configurable));


object.js
Remove all references to controlBar.

[7297]
    Replace:
        ide.controlBar.pauseButton.refresh();
    With:
        //ide.controlBar.pauseButton.refresh(); // [Adrian] Snapp

[7330]
    Replace:
        ide.controlBar.pauseButton.refresh();
    With:
        //ide.controlBar.pauseButton.refresh(); // [Adrian] Snapp

[7491]
    Replace:
        ide.controlBar.pauseButton.refresh();
    With:
        //ide.controlBar.pauseButton.refresh(); // [Adrian] Snapp

[7522]
    Replace:
        function () {ide.controlBar.pauseButton.refresh(); }
    With:
        function () { /*ide.controlBar.pauseButton.refresh();*/ } // [Adrian] Snapp


gui.js
Remove all references to controlBar.
Add code to autoload and start the project

[358]
    Replace:
        myself.controlBar.hide();
    With:
        // [Adrian] Snapp
        // Remove all references to controlBar
        //myself.controlBar.hide();

[592]
    Replace:
        this.createControlBar();
    With:
        //this.createControlBar(); // [Adrian] Snapp

[1786]
    Replace:
        this.controlBar.setPosition(this.logo.topRight());
        this.controlBar.setWidth(this.right() - this.controlBar.left());
        this.controlBar.fixLayout();
    With:
        // Adrian [Snapp]
        //this.controlBar.setPosition(this.logo.topRight());
        //this.controlBar.setWidth(this.right() - this.controlBar.left());
        //this.controlBar.fixLayout();

[1828]
    Replace:
        (this.height() - this.controlBar.height() * 2 - padding * 2)
    With:
        (this.height() - 0 * 2 - padding * 2) // [Adrian] Snapp

[1890]
    Replace:
        this.controlBar.updateLabel();
    With:
        //this.controlBar.updateLabel(); // [Adrian] Snapp

[1911]
    Replace:
        this.controlBar.height() + 10
    With:
        10 // [Adrian] Snapp

[2128]
    Replace:
        this.controlBar.refreshSlider();
    With:
        //this.controlBar.refreshSlider(); // [Adrian] Snapp

[2142]
    Replace:
        this.controlBar.startButton.labelString = new SymbolMorph('flash', 14);
        his.controlBar.startButton.drawNew();
        this.controlBar.startButton.fixLayout();
    With:
        // [Adrian] Snapp
        //this.controlBar.startButton.labelString = new SymbolMorph('flash', 14);
        //this.controlBar.startButton.drawNew();
        //this.controlBar.startButton.fixLayout();

[2151]
    Replace:
        this.controlBar.startButton.labelString = new SymbolMorph('flag', 14);
        this.controlBar.startButton.drawNew();
        this.controlBar.startButton.fixLayout();
    With:
        // [Adrian] Snapp
        //this.controlBar.startButton.labelString = new SymbolMorph('flag', 14);
        //this.controlBar.startButton.drawNew();
        //this.controlBar.startButton.fixLayout();

[4750]
    Replace:
        this.controlBar.updateLabel();
    With:
        //this.controlBar.updateLabel(); // [Adrian] Snapp

[4784]
    Replace:
        this.controlBar.updateLabel();
    With:
        //this.controlBar.updateLabel(); // [Adrian] Snapp

[4965]
    Replace:
        this.controlBar.cloudButton,
        this.controlBar.projectButton,
        this.controlBar.settingsButton,
        this.controlBar.steppingButton,
        this.controlBar.stageSizeButton,
    With:
        // [Adrian] Snapp
        //this.controlBar.cloudButton,
        //this.controlBar.projectButton,
        //this.controlBar.settingsButton,
        //this.controlBar.steppingButton,
        //this.controlBar.stageSizeButton,

[4990]
    Replace:
        this.controlBar.setColor(this.color);
        this.controlBar.appModeButton.refresh();
    With:
        // [Adrian] Snapp
        //this.controlBar.setColor(this.color);
        //this.controlBar.appModeButton.refresh();

[5009]
    Replace:
        this.controlBar.setColor(this.frameColor);
    With:
        //this.controlBar.setColor(this.frameColor); // [Adrian] Snapp

[5068]
    Replace:
        myself.controlBar.stageSizeButton.refresh();
    With:
        //myself.controlBar.stageSizeButton.refresh(); // [Adrian] Snapp

[5158]
	Replace:
		pos = this.controlBar.settingsButton.bottomLeft(),
	With:
		pos = 0, // [Adrian] Snapp
[5186]
	Replace:
		pos = this.controlBar.settingsButton.bottomLeft(),
	With:
		pos = 0, // [Adrian] Snapp

[5405]
    Replace:
        this.controlBar.stageSizeButton.refresh();
    With:
        //this.controlBar.stageSizeButton.refresh(); // [Adrian] Snapp

[9373]
    Replace:
        ide.controlBar.stageSizeButton.refresh();
    With:
        // [Adrian] Snapp
        //ide.controlBar.stageSizeButton.refresh();

[9385]
    Replace:
        ide.controlBar.stageSizeButton.refresh();
    With:
        // [Adrian] Snapp
        //ide.controlBar.stageSizeButton.refresh();

[556]
    Add:
        // [Adrian] Snapp
        // Add code to force project to start automatically after all resources have been loaded.
        this.rawOpenProjectString(this.snapproject);
        this.toggleAppMode(true);
        var handle = setInterval(function () {
            var allSpritesDone = true;
            myself.stage.children.forEach(function (child) {
                if (!child.costumes) { // If the child has no costumes it doesn't matter
                    return;
                }
            
                if (!child.costumes.length()) { // If the length of the costume array is 0 it's the same as if it has none
                    return;
                }

                var costumes = child.costumes.asArray();
                const someCostumeNotLoaded = costumes.some(function (costume) {
                    return typeof costume.loaded === 'function';
                });

                if (someCostumeNotLoaded || !child.costume) {
                    allSpritesDone = false;
                }
            });

            if (allSpritesDone) {
                clearInterval(handle);
                myself.runScripts();
            }
        }, 100);
