Snap 6.2.1

Look for [Adrian] in files to find the exact location.


object.js
Remove all references to controlBar.

[7913]
    Replace:
        ide.controlBar.pauseButton.refresh();
    With:
	    // [Adrian]: Snapp! Remove all references to controlBar
        //ide.controlBar.pauseButton.refresh();

[7977]
    Replace:
        ide.controlBar.stopButton.refresh();
    With:
	    // [Adrian]: Snapp! Remove all references to controlBar
        //ide.controlBar.stopButton.refresh();

[8135]
    Replace:
        ide.controlBar.pauseButton.refresh();
    With:
	    // [Adrian]: Snapp! Remove all references to controlBar
        //ide.controlBar.pauseButton.refresh();

[8164]
    Replace:
        () => ide.controlBar.pauseButton.refresh()
    With:
		// [Adrian]: Snapp! Remove all references to controlBar
        () => { /*ide.controlBar.pauseButton.refresh()*/ }


gui.js
Remove all references to controlBar.
Add code to autoload and start the project

[352]
    Replace:
        myself.controlBar.hide();
    With:
        // [Adrian]: Remove all references to controlBar
        //myself.controlBar.hide();

[616]
    Replace:
        this.createControlBar();
    With:
		// [Adrian]: Remove all references to controlBar
        //this.createControlBar();

[1900]
    Replace:
        this.controlBar.setPosition(this.logo.topRight());
        this.controlBar.setWidth(this.right() - this.controlBar.left());
        this.controlBar.fixLayout();
    With:
        // [Adrian]: Remove all references to controlBar
        //this.controlBar.setPosition(this.logo.topRight());
        //this.controlBar.setWidth(this.right() - this.controlBar.left());
        //this.controlBar.fixLayout();

[1940]
    Replace:
        (this.height() - this.controlBar.height() * 2 - padding * 2)
    With:
		// [Adrian]: Remove all references to controlBar
        (this.height() - 0 * 2 - padding * 2)

[2003]
    Replace:
        this.controlBar.updateLabel();
    With:
	    // [Adrian]: Remove all references to controlBar
        //this.controlBar.updateLabel();

[2025]
    Replace:
        this.controlBar.height() + 10
    With:
		// [Adrian]: Remove all references to controlBar
        10

[2266]
    Replace:
        this.controlBar.refreshSlider();
    With:
	    // [Adrian]: Remove all references to controlBar
        //this.controlBar.refreshSlider();

[2281]
    Replace:
        this.controlBar.startButton.labelString = new SymbolMorph('flash', 14);
        this.controlBar.startButton.createLabel();
        this.controlBar.startButton.fixLayout();
        this.controlBar.startButton.rerender();
    With:
        // [Adrian]: Remove all references to controlBar
        //this.controlBar.startButton.labelString = new SymbolMorph('flash', 14);
        //this.controlBar.startButton.createLabel();
        //this.controlBar.startButton.fixLayout();
        //this.controlBar.startButton.rerender();

[2291]
    Replace:
        this.controlBar.startButton.labelString = new SymbolMorph('flag', 14);
        this.controlBar.startButton.createLabel();
        this.controlBar.startButton.fixLayout();
        this.controlBar.startButton.rerender();
    With:
        // [Adrian]: Remove all references to controlBar
        //this.controlBar.startButton.labelString = new SymbolMorph('flag', 14);
        //this.controlBar.startButton.createLabel();
        //this.controlBar.startButton.fixLayout();
        //this.controlBar.startButton.rerender();

[5075]
    Replace:
        this.controlBar.updateLabel();
    With:
	    // [Adrian]: Remove all references to controlBar
        //this.controlBar.updateLabel();

[5109]
    Replace:
        this.controlBar.updateLabel();
    With:
	    // [Adrian]: Remove all references to controlBar
        //this.controlBar.updateLabel();

[5291]
    Replace:
        this.controlBar.cloudButton,
        this.controlBar.projectButton,
        this.controlBar.settingsButton,
        this.controlBar.steppingButton,
        this.controlBar.stageSizeButton,
    With:
        // [Adrian]: Remove all references to controlBar
        //this.controlBar.cloudButton,
        //this.controlBar.projectButton,
        //this.controlBar.settingsButton,
        //this.controlBar.steppingButton,
        //this.controlBar.stageSizeButton,

[5315]
    Replace:
        this.controlBar.setColor(this.color);
        this.controlBar.appModeButton.refresh();
    With:
        // [Adrian]: Remove all references to controlBar
        //this.controlBar.setColor(this.color);
        //this.controlBar.appModeButton.refresh();

[5334]
    Replace:
        this.controlBar.setColor(this.frameColor);
    With:
	    // [Adrian]: Remove all references to controlBar
        //this.controlBar.setColor(this.frameColor);

[5046]
    Replace:
        myself.controlBar.stageSizeButton.refresh();
    With:
	    // [Adrian]: Remove all references to controlBar
        //myself.controlBar.stageSizeButton.refresh();

[5480]
	Replace:
		pos = this.controlBar.settingsButton.bottomLeft(),
	With:
		// [Adrian]: Remove all references to controlBar
		pos = 0,
[5522]
	Replace:
		pos = this.controlBar.settingsButton.bottomLeft(),
	With:
		// [Adrian]: Remove all references to controlBar
		pos = 0,

[5795]
    Replace:
        this.controlBar.stageSizeButton.refresh();
    With:
		// [Adrian]: Remove all references to controlBar
        //this.controlBar.stageSizeButton.refresh();

[9710]
    Replace:
        ide.controlBar.stageSizeButton.refresh();
    With:
        // [Adrian]: Remove all references to controlBar
        //ide.controlBar.stageSizeButton.refresh();

[9724]
    Replace:
        ide.controlBar.stageSizeButton.refresh();
    With:
        // [Adrian] Snapp
        //ide.controlBar.stageSizeButton.refresh();

[611]
    Add:
        // [Adrian]: Snapp! Add code to force project to start automatically after all resources have been loaded.
        this.rawOpenProjectString(this.snapproject);
        this.toggleAppMode(true);
        var handle = setInterval(function () {
            var allSpritesDone = true;
            myself.stage.children.forEach(function (child) {
                if (!child.costumes) { // If the child has no costumes it doesn't matter
                    return;
                }
            
                if (!child.costumes.length()) { // If the length of the costume array is 0 it's the same as if it has none
                    return;
                }

                var costumes = child.costumes.asArray();
                const someCostumeNotLoaded = costumes.some(function (costume) {
                    return typeof costume.loaded === 'function';
                });

                if (someCostumeNotLoaded || !child.costume) {
                    allSpritesDone = false;
                }
            });

            if (allSpritesDone) {
                clearInterval(handle);
                myself.runScripts();
            }
        }, 100);
